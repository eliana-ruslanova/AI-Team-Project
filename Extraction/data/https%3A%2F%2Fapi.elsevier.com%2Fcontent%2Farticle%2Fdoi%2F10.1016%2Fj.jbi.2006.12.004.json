{"scopus-eid": "2-s2.0-34548363924", "originalText": "serial JL 272371 291210 291682 291870 291901 31 80 Journal of Biomedical Informatics JOURNALBIOMEDICALINFORMATICS 2006-12-24 2006-12-24 2010-10-07T12:08:32 1-s2.0-S1532046406001390 S1532-0464(06)00139-0 S1532046406001390 10.1016/j.jbi.2006.12.004 S300 S300.1 FULL-TEXT 1-s2.0-S1532046407X00388 2015-05-15T06:30:58.184067-04:00 0 0 20071001 20071031 2007 2006-12-24T00:00:00Z articleinfo crossmark dco dateupdated tomb dateloaded datesearch indexeddate issuelist volumelist yearnav articletitlenorm authfirstinitialnorm authfirstsurnamenorm cid cids contenttype copyright dateloadedtxt docsubtype doctype doi eid ewtransactionid hubeid issfirst issn issnnorm itemstage itemtransactionid itemweight oauserlicense openaccess openarchive pg pgfirst pglast pii piinorm pubdateend pubdatestart pubdatetxt pubyr sortorder srctitle srctitlenorm srctype subheadings volfirst volissue webpdf webpdfpagecount figure table body acknowledge affil appendices articletitle auth authfirstini authfull authkeywords authlast primabst ref alllist content oa subj ssids 1532-0464 15320464 40 40 5 5 Volume 40, Issue 5 8 507 526 507 526 200710 October 2007 2007-10-01 2007-10-31 2007 article fla Copyright \u00a9 2007 Elsevier Inc. All rights reserved. RUNTIMEAPPLICATIONHYBRIDASBRUCLINICALGUIDELINES YOUNG O 1 Introduction 1.1 Desiderata for a guideline-based decision support system 1.2 The DeGeL architecture 1.3 The Asbru guideline-specification ontology 2 Methods 2.1 The hybrid runtime application model of the Spock system 2.2 The EPR access method 2.3 The Spock system architecture 2.4 The intermediate representation levels of the Hybrid-Asbru ontology 2.4.1 The semi-structured Asbru representation format 2.4.2 The semi-formal Asbru representation format 2.5 Adding support to encode common clinical actions 2.6 The semantics and pragmatics of a Hybrid-Asbru plan 2.6.1 The semantics of state propagation within a Hybrid-Asbru plan 2.6.2 The pragmatics of the state transition model of a Hybrid-Asbru plan instance 2.7 A detailed view of the Spock guideline-application engine 2.7.1 Preserving the abstraction barriers of the Spock engine 2.7.2 The internal workings of the Spock engine 2.7.3 Minimizing the user\u2019s interaction requirements 2.8 The Spock server and the guideline application log 2.9 The default user interface of the Spock system 3 Functional evaluation of the Spock system 3.1 The evaluation methodology 3.2 The evaluation results 4 Conclusions and discussion 4.1 Conclusions 4.2 Discussion: limitations and advantages of the Spock architecture 4.2.1 Limitations of the current architecture and study 4.2.2 Advantages of the current architecture Acknowledgments Appendix A Examples of Hybrid-Asbru ontology intermediate formats Appendix B The semi-formal expressions extension to the Hybrid-Asbru ontology Appendix C The clinical actions palette extension to the Hybrid-Asbru ontology References JAMES 2000 1001 1003 B OZDAS 2006 188 196 A GRIMSHAW 1993 1317 1322 J ZIELSTORFF 1998 227 236 R PELEG 2003 52 68 M DECLERCQ 2004 1 27 P SCHADOW 2001 259 274 G SHAHAR 2004 325 344 Y SHAHAR 1998 29 51 Y BOAZ 2005 3 24 D MICHAEL 2005 75 81 N FOWLER 2002 M PATTERNSENTERPRISEAPPLICATIONARCHITECTURE ABELSON 1996 H STRUCTUREINTERPRETATIONCOMPUTERPROGRAMS WANG 2004 305 318 D SUTTON 2003 433 443 D YOUNGX2007X507 YOUNGX2007X507X526 YOUNGX2007X507XO YOUNGX2007X507X526XO 2013-07-17T11:42:39Z OA-Window Full ElsevierBranded http://www.elsevier.com/open-access/userlicense/1.0/ item S1532-0464(06)00139-0 S1532046406001390 1-s2.0-S1532046406001390 10.1016/j.jbi.2006.12.004 272371 2010-11-08T20:47:27.489401-05:00 2007-10-01 2007-10-31 1-s2.0-S1532046406001390-main.pdf https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/MAIN/application/pdf/3ebc5221eea0308efe4076dfb47f327b/main.pdf https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/MAIN/application/pdf/3ebc5221eea0308efe4076dfb47f327b/main.pdf main.pdf pdf true 2067198 MAIN 20 1-s2.0-S1532046406001390-main_1.png https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/PREVIEW/image/png/3d9a221fc1e06f0b62f0038db4ca5eaa/main_1.png https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/PREVIEW/image/png/3d9a221fc1e06f0b62f0038db4ca5eaa/main_1.png main_1.png png 68521 849 656 IMAGE-WEB-PDF 1 1-s2.0-S1532046406001390-gr1.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr1/DOWNSAMPLED/image/jpeg/a4a868156fd234ff3668f07e47fc5905/gr1.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr1/DOWNSAMPLED/image/jpeg/a4a868156fd234ff3668f07e47fc5905/gr1.jpg gr1 gr1.jpg jpg 50606 149 569 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr1.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr1/THUMBNAIL/image/gif/f9775f0575a90e5f62ddc0bfc114a7d4/gr1.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr1/THUMBNAIL/image/gif/f9775f0575a90e5f62ddc0bfc114a7d4/gr1.sml gr1 gr1.sml sml 2784 33 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr10.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr10/DOWNSAMPLED/image/jpeg/c9ab501969db1208bec5af614d2b7969/gr10.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr10/DOWNSAMPLED/image/jpeg/c9ab501969db1208bec5af614d2b7969/gr10.jpg gr10 gr10.jpg jpg 34827 176 426 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr10.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr10/THUMBNAIL/image/gif/ed6f701045ea3b4c04378aac47f9e950/gr10.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr10/THUMBNAIL/image/gif/ed6f701045ea3b4c04378aac47f9e950/gr10.sml gr10 gr10.sml sml 2552 52 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr11.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr11/DOWNSAMPLED/image/jpeg/24439cac5ef8ecac1384d1dd4b399f48/gr11.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr11/DOWNSAMPLED/image/jpeg/24439cac5ef8ecac1384d1dd4b399f48/gr11.jpg gr11 gr11.jpg jpg 50656 234 537 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr11.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr11/THUMBNAIL/image/gif/00fa9043642f4f996e4461928ff9eb95/gr11.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr11/THUMBNAIL/image/gif/00fa9043642f4f996e4461928ff9eb95/gr11.sml gr11 gr11.sml sml 2497 54 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr12.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr12/DOWNSAMPLED/image/jpeg/75f827972a102e2e18d4ab753d8e54c6/gr12.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr12/DOWNSAMPLED/image/jpeg/75f827972a102e2e18d4ab753d8e54c6/gr12.jpg gr12 gr12.jpg jpg 47013 322 552 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr12.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr12/THUMBNAIL/image/gif/4aebcb5145ffa2abf15c5a4517b2ce9f/gr12.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr12/THUMBNAIL/image/gif/4aebcb5145ffa2abf15c5a4517b2ce9f/gr12.sml gr12 gr12.sml sml 1681 73 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr13.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr13/DOWNSAMPLED/image/jpeg/b353c8f654f510c3de949182279f42d0/gr13.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr13/DOWNSAMPLED/image/jpeg/b353c8f654f510c3de949182279f42d0/gr13.jpg gr13 gr13.jpg jpg 44427 291 550 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr13.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr13/THUMBNAIL/image/gif/24325f9e17465ee5f9f9b6c99c24bd96/gr13.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr13/THUMBNAIL/image/gif/24325f9e17465ee5f9f9b6c99c24bd96/gr13.sml gr13 gr13.sml sml 1672 66 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr14.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr14/DOWNSAMPLED/image/jpeg/13d7140702d1c672e1167bb0ec8e76e5/gr14.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr14/DOWNSAMPLED/image/jpeg/13d7140702d1c672e1167bb0ec8e76e5/gr14.jpg gr14 gr14.jpg jpg 39772 207 540 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr14.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr14/THUMBNAIL/image/gif/ec01f3d173e1dbf4b820faa00afd9c24/gr14.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr14/THUMBNAIL/image/gif/ec01f3d173e1dbf4b820faa00afd9c24/gr14.sml gr14 gr14.sml sml 2066 48 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr2.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr2/DOWNSAMPLED/image/jpeg/04d235792bf30ab045c54c79ae075249/gr2.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr2/DOWNSAMPLED/image/jpeg/04d235792bf30ab045c54c79ae075249/gr2.jpg gr2 gr2.jpg jpg 65252 222 579 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr2.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr2/THUMBNAIL/image/gif/00f2d5731c4b13251df2e35e45445d3b/gr2.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr2/THUMBNAIL/image/gif/00f2d5731c4b13251df2e35e45445d3b/gr2.sml gr2 gr2.sml sml 3053 48 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr3.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr3/DOWNSAMPLED/image/jpeg/e10c4d268b4f03e54e28500872597103/gr3.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr3/DOWNSAMPLED/image/jpeg/e10c4d268b4f03e54e28500872597103/gr3.jpg gr3 gr3.jpg jpg 65084 260 560 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr3.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr3/THUMBNAIL/image/gif/2277e0b21950ed2353095af75d8c0b04/gr3.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr3/THUMBNAIL/image/gif/2277e0b21950ed2353095af75d8c0b04/gr3.sml gr3 gr3.sml sml 3215 58 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr4.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr4/DOWNSAMPLED/image/jpeg/9ea98a8706b946b5c635c03af41417ac/gr4.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr4/DOWNSAMPLED/image/jpeg/9ea98a8706b946b5c635c03af41417ac/gr4.jpg gr4 gr4.jpg jpg 93634 567 562 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr4.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr4/THUMBNAIL/image/gif/bbe24749afa8bff21e582658d2a11ea1/gr4.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr4/THUMBNAIL/image/gif/bbe24749afa8bff21e582658d2a11ea1/gr4.sml gr4 gr4.sml sml 2048 93 92 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr5.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr5/DOWNSAMPLED/image/jpeg/71f60df713c38d6b4621d9593196eac9/gr5.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr5/DOWNSAMPLED/image/jpeg/71f60df713c38d6b4621d9593196eac9/gr5.jpg gr5 gr5.jpg jpg 63528 259 571 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr5.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr5/THUMBNAIL/image/gif/f6cc48c76da163ddc3c0bf805849d992/gr5.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr5/THUMBNAIL/image/gif/f6cc48c76da163ddc3c0bf805849d992/gr5.sml gr5 gr5.sml sml 2995 57 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr8.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr8/DOWNSAMPLED/image/jpeg/bdbb0cdf636f9263cb2b3bca50971c28/gr8.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr8/DOWNSAMPLED/image/jpeg/bdbb0cdf636f9263cb2b3bca50971c28/gr8.jpg gr8 gr8.jpg jpg 22932 113 430 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr8.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr8/THUMBNAIL/image/gif/06e0cebc5a7a8c5839a5792161d5268a/gr8.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr8/THUMBNAIL/image/gif/06e0cebc5a7a8c5839a5792161d5268a/gr8.sml gr8 gr8.sml sml 1746 33 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr9.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr9/DOWNSAMPLED/image/jpeg/182a8fbfeed458b336f16f6aa0f39e30/gr9.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr9/DOWNSAMPLED/image/jpeg/182a8fbfeed458b336f16f6aa0f39e30/gr9.jpg gr9 gr9.jpg jpg 26961 113 490 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr9.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr9/THUMBNAIL/image/gif/475824bb98b6cf4940e804fefea12a67/gr9.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr9/THUMBNAIL/image/gif/475824bb98b6cf4940e804fefea12a67/gr9.sml gr9 gr9.sml sml 1930 29 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr7.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr7/DOWNSAMPLED/image/jpeg/8d5c4eeec4eca421166a951fb35a9edb/gr7.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr7/DOWNSAMPLED/image/jpeg/8d5c4eeec4eca421166a951fb35a9edb/gr7.jpg gr7 gr7.jpg jpg 67827 188 667 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr7.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr7/THUMBNAIL/image/gif/4fdd1dc3dce7c34cedad4375091291a0/gr7.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr7/THUMBNAIL/image/gif/4fdd1dc3dce7c34cedad4375091291a0/gr7.sml gr7 gr7.sml sml 2443 35 125 IMAGE-THUMBNAIL 1-s2.0-S1532046406001390-gr6.jpg https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr6/DOWNSAMPLED/image/jpeg/0f8dc44ecd04255e965bc05c88a5e6e3/gr6.jpg https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr6/DOWNSAMPLED/image/jpeg/0f8dc44ecd04255e965bc05c88a5e6e3/gr6.jpg gr6 gr6.jpg jpg 93951 419 578 IMAGE-DOWNSAMPLED 1-s2.0-S1532046406001390-gr6.sml https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S1532046406001390/gr6/THUMBNAIL/image/gif/80d2dd156626a0c054d4c57634aa53e8/gr6.sml https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S1532046406001390/gr6/THUMBNAIL/image/gif/80d2dd156626a0c054d4c57634aa53e8/gr6.sml gr6 gr6.sml sml 5091 91 125 IMAGE-THUMBNAIL YJBIN 1324 S1532-0464(06)00139-0 10.1016/j.jbi.2006.12.004 Elsevier Inc. Fig. 1 The gradual conversion process in the DeGeL framework. (1) a free-text GL is selected for conversion to a machine-interpretable representation in some target GL-specification ontology and is uploaded to DeGeL\u2019s knowledge-base.; (2) an ontology-specific consensus is created by a knowledge-engineer, who understands the ontology, and an expert-physician, who is familiar with the GL\u2019s domain; (3) the GL-editor marks up (structures) portions of the GL, using semantic labels from the target ontology, creating a semi-structured and, in collaboration with a knowledge engineer, a semi-formal GL representations.; (4) knowledge engineers add executable expressions in the syntax of the target ontology. Fig. 2 The state transition model of an Asbru plan. A plan transits from one state to the other based on the evaluation of certain conditions (e.g., filter-precondition). The different states can be grouped into two main phases of the plan\u2019s lifecycle, selection phase, and execution phase (modified from [19]). Fig. 3 The Spock client\u2013server architecture. The services provided by the DeGeL framework are used to retrieve Hybrid-Asbru GLs for application. In case EPR connection is available, manual or automatic queries regarding patient\u2019s clinical state are sent to the IDAN architecture. Patient data can also be visualized and explored using the KNAVE-II tool. The GL application information is logged in a remote Spock server for various purposes such as resumption of intermittent GL applications. Fig. 4 The extended state transition model of a Hybrid-Asbru plan, illustrated using the UML Statecharts notation. An initial state is denoted as a bullet, the final state is denoted as a bullet with a ring round it and any other state as a rounded rectangle with a name. A transition from one state to the other is shown as an arrow. A state transition is constrained by a guard (i.e., event [condition]/action) which describes the event that triggers the transition and the condition that must hold for the transition to take place. An action that the object performs when it enters to a new state is described either in the state-transition\u2019s guard after a slash (/) or in the state\u2019s box preceded by an implicit entry event with a slash too. An action that the object performs when it exits from a state is described in the state\u2019s box preceded by an implicit exit event with a slash (/). See text in Section 2.6.2 for the semantics of the transition model. Fig. 5 An illustration of the internal structure of the Spock Engine while applying a Hybrid-Asbru GL. For the exact details, refer to Section 2.7.2. Fig. 6 The main form of the default user interface developed for the Spock system. The user interface can be roughly divided into three main panels: (A) displays the plan-instances which were created during GL application in a tree-shaped hierarchy, each plan-instance\u2019s state is denoted using a colored-icon as shown in the icons legend at the bottom part of the panel; (B) displays the title of the current selected plan-instance at the top part and the plan-instance\u2019s relevant knowledge roles content, each knowledge role in a separate tab (e.g., Procedural Knowledge and Abort Condition tabs), according to its current state, in this case the plan-body knowledge role; and (C) displays valuable GL information including knowledge definitions of concepts used in the GL, a detailed outline of the GL consensus and the progress of the application using the tabs GL Knowledge, GL Consensus and Application Trace in that order. Each tab, except for the Application Trace tab, supports various search options inside the tab\u2019s content and an option to display the tab\u2019s content in a separate window. Fig. 7 The mean measures of the 15 application instances created during the experimental runs. Fig. A1 A snippet of text taken from a free-text GL for screening, treating, monitoring and evaluation of patients with hypertension. The GL was uploaded into the DeGeL\u2019s GL knowledge-base as a GL source (i.e., free-text GL). Thus, the free-text GL can be used as the basis for a formalized conversion of it using any GL-specification ontology such as the Hybrid-Asbru ontology. Fig. A2 An example of a semi-structured representation of an abort-condition and plan-body knowledge roles marked by the guideline editor, usually a clinician, based on the snippet text displayed in Fig. A1. Fig. A3 An example of a semi-formal representation of an abort-condition knowledge role. All semi-formal conditions are based on the semi-formal expression extension (See Appendix C). In this case a negated-expression that contains a simple-expression. The input for the semi-formal abort-condition, marked by either an advanced guideline editor or by a knowledge engineer, is the semi-structured abort-condition displayed in Fig. A2. Note to the temporal constraint, one to two month after the start of the current plan (denoted by the <self/> element), and the mapping of the concept \u201cblood-pressure\u201d to a standard term originating from the LOINC controlled medical vocabulary. Fig. A4 An example of a semi-formal representation of a plan-body knowledge role. Note to the explicitly specified elicitation, such as the recommended actions (or plans) to be performed sequentially; and that only recommendations one and three are mandatory, since the application waits for both of them to terminate successfully in order to continue with the application of the guideline (see Fig. A3). Fig. B1 A UML class diagram of the semi-formal expression extension to the Hybrid-Asbru ontology. All expression type contains a descriptive name, a slot for any comments, and an optional temporal constraint based on Asbru\u2019s Time-Annotation notation. A semi-formal expression is either a simple expression or a composite expression (i.e., non-atomic). A simple-expression can optionally include a mapping to a standard term originating from a controlled medical vocabulary, thus providing support to reuse and sharing of guideline knowledge across diverse clinical environments. A composite expression consists of any other type of an expression and this nested expression can be easily created. (see Fig. A4). Fig. C1 A UML class diagram of the clinical actions added to the Hybrid-Aabru ontology to enable the specification of activities common to clinical practice and often used in clinical GLs. Fig. C2 The XML output of a clinical action used to describe a physical examination of the thyroid gland for a patient suspected of having hypothyroidism. Note the use of a controlled medical vocabulary, in this case CPT, for supporting sharing and reuse of GL knowledge. Table 1 The number of Hybrid-Asbru knowledge roles created for each of the GLs selected for the evaluation Knowledge role name PID COPD HypoThyrd Actors 11 7 1 Clinical context 11 7 1 Intermediate intentions 10 2 5 Outcome intentions 4 1 6 Filter-condition 29 2 1 Abort-condition 10 5 3 Complete-condition 5 3 \u2014 Suspend-condition 1 1 1 Reactivate-condition 1 1 1 Plan-body 49 9 8 Table 2 Overview information about key complexity characteristics of the GLs selected for evaluation PID COPD HypoThyrd Number of decision steps 16 4 7 Number of atomic plans 57 10 14 Composite plans Number of cyclical plans 10 2 2 Number of sequential subplans 28 6 4 Number of parallel subplans 11 1 2 Total number of plans 106 19 22 Table 3 Summary of several key attributes of application instances created for the experimental runs Experimental run index No. of created composite plans No. of created atomic plans No. of total created plans No. of action steps applied No. of decision steps applied No. of total state transitions COPD Run #1 6 6 12 12 2 37 Run #2 4 3 7 9 2 22 Run #3 6 5 11 13 3 35 Run #4 8 9 17 17 4 48 Run #5 7 8 15 18 6 45 Average 6.2 6.2 12.4 13.8 3.4 37.4 PID Run #1 10 29 39 12 7 98 Run #2 11 9 20 18 6 54 Run #3 9 4 13 17 11 40 Run #4 11 6 17 16 7 55 Run #5 9 2 11 16 8 36 Average 10 10 20 15.8 7.8 56.6 HypoThyrd Run #1 10 15 25 19 8 64 Run #2 11 13 24 21 11 65 Run #3 10 12 22 18 9 59 Run #4 10 11 21 18 9 58 Run #5 12 15 27 22 11 72 Average 10.5 12.7 23.2 19 9.3 62.4 Total 134 147 281 246 104 788 Average 8.9 9.8 18.7 16.4 6.9 52.5 Table 4 Common themes extracted from the semi-structured interview during the Spock system evaluation Common themes User interface suitability More suitable for use by knowledge engineers than by clinicians More appropriate for use during GL editing The design is sometimes inconsistent Decision support level The decision-support level increases with the quality and the clarity of the specification of the GL\u2019s intermediate-representation level The Spock system performed well Requires more explanations Other potential clinical tasks A simulation module that could be useful while editing GLs Would be better implemented as an agent within an intelligent EPR May improve quality of GL development by demonstrating actual possible application behavior Runtime application of Hybrid-Asbru clinical guidelines Ohad Young a \u204e ohadyn@bgu.ac.il Yuval Shahar a yshahar@bgu.ac.il Yair Liel b Eitan Lunenfeld b Guy Bar b Erez Shalom a Susana B. Martins c Laszlo T. Vaszar c Tal Marom d Mary K. Goldstein e a Medical Informatics Research Center, Department of Information Systems Engineering, Ben Gurion University, Beer Sheva 84105, Israel b Soroka Medical Center, Faculty of Health Sciences, Ben Gurion University of the Negev, Beer Sheva, Israel c Stanford University School of Medicine, Department of Medicine and Veterans Administration Palo Alto Health Care System, Medical Service, Palo Alto, CA, USA d Wolfson Medical Center, Holon, Israel e VA Palo Alto Health Care System, Geriatrics Research Education and Clinical Center (GRECC), Palo Alto, CA, USA and Stanford University, Center for Primary Care and Outcomes Research, Stanford, CA, USA \u204e Corresponding author. Fax: +972 8 6477161. Abstract Clinical guidelines are a major tool in improving the quality of medical care. However, to support the automation of guideline-based care, several requirements must be filled, such as specification of the guidelines in a machine-interpretable format and a connection to an Electronic Patient Record (EPR). For several different reasons, it is beneficial to convert free-text guidelines gradually, through several intermediate representations, to a machine-interpretable format. It is also realistic to consider the case when an EPR is unavailable. We propose an innovative approach to the runtime application of intermediate-represented Hybrid-Asbru guidelines, with or without an available EPR. The new approach capitalizes on our extensive work on developing the Digital electronic Guideline Library (DeGeL) framework. The new approach was implemented as the Spock system. For evaluation, three guidelines were specified in an intermediate format and were applied to a set of simulated patient records designed to cover prototypical cases. In all cases, the Spock system produced the expected output, and did not produce an unexpected one. Thus, we have demonstrated the capability of the Spock system to apply guidelines encoded in the Hybrid-Asbru intermediate representation, when an EPR is not available. Keywords Clinical guidelines Decision support systems Knowledge representation 1 Introduction Clinical practice guidelines (or Care Plans) present a great potential to improve and standardize the quality of medical care [1,2]. According to the Institute of Medicine\u2019s (IOM) definition [3], clinical guidelines (GLs) are: \u201cSystematically developed statements to assist practitioner and patient decisions about appropriate health care for specific clinical circumstances\u201d. Extensive evidence exists that conforming to state-of-the-art clinical GLs improves the quality of medical care [4], sometimes even the survival rate of patients, a fact that had been rigorously demonstrated [5,6], while reducing its escalating costs. Most GLs, however, are text-based and not easily accessible to care providers who most need them at the point of care [7]. One of the barriers to using these text-based representations is that, given their unstructured form, they are not compatible with computer interpretation. Therefore, one of the key requirements to support automation of GL-based care is the formalization of GLs to enable interpretation and execution by computerized machines. We call such representations machine-interpretable. During the past 20 years, there have been several efforts to support automation of GL-based care, often using such machine-interpretable representations [8]. An excellent comparative review of most current approaches to the support of complex GL-based care is provided by Peleg et al.\u2019s [9] and de Clercq et al.\u2019s [10] comprehensive papers. However, unfortunately, neither fully formalized clinical GLs nor universally accessible electronic patient records (EPRs) are currently the standard; in fact, the existence of both in the same site is somewhat of a rarity. Thus, a solution must be provided for all the cases in which one or the other of these requirements is missing. As we shall demonstrate in this paper, such a solution is indeed possible and feasible, but requires a comprehensive framework to support the notion of incrementally formalized levels of clinical-GL representation. As we shall see, our previous studies have included the development of such a hybrid framework, as we refer to it (see Section 1.2), and our solution capitalizes on that framework. The focus of this paper is thus on the precise use of such a hybrid framework for addressing the problem of providing support to GL-based care when either a fully formalized representation of the GL, or a sufficiently expressive EPR infrastructure is lacking 1.1 Desiderata for a guideline-based decision support system An effective GL-based decision support system (DSS) framework (in particular, for application of GLs at the point of care) must address several key requirements, or desiderata, as had been previously pointed out by several studies [7,11\u201313]: (1) Retrieval of GLs\u2014when several potential GLs exist, a GL first must be retrieved from a GLs repository and perhaps tested for its applicability prior to its application. (2) Visualization of GLs\u2014to assist the care provider to comprehend the GL better, the GL\u2019s encoded knowledge should be visualized in an unambiguous and intuitive manner. (3) Integration into local clinical host systems\u2014for seamlessly integrating the GL DSS in a local clinical information system, it should be linked to other information systems (e.g., order entry system), including the user interface, via standard messages and protocols. (4) Persistent storage of GL application\u2014to support intermittent application of complex GLs over long periods of time, the data gathered during application of the GL (e.g., user\u2019s decisions) must be stored in a persistent manner (e.g., database). (5) Autonomous clinician control\u2014the DSS must enable the clinician to override or ignore the GL\u2019s suggestion or data interpretation (6) Support for \u201clook ahead\u201d\u2014to support queries about the meaning of recommended actions, the DSS should enable its users to explore dynamically what the guideline entails in each future situation (i.e., a \u201cWhat If\u201d query) without actually applying it. (7) Minimize user interaction\u2014due to the short duration of clinical consultations, the DSS must not require too much user attention. For example, the system should indicate when sufficient data have been provided for the current decision step, without requesting unnecessary data entry by the user. As will be pointed out later, the combination of the DeGeL digital guideline library architecture we have developed (see Section 1.2) and the Spock system we focus on in the current study (see Section 2.3) cater essentially to all of the desiderata. However, we also consider the following two desiderata, which were not treated as intensively in the current literature, and which are the focus of the current study: (8) Capability to handle variable access to electronic patient data\u2014the DSS should be able to capitalize on having an Electronic Patient Record (EPR), in which case it should be able to upgrade its level of support accordingly; but it should also be able to cater to the situation of not having an EPR-based support sufficient for the automated application of the GL, not an uncommon situation [14], or of not having an EPR available at all. (9) Capability to handle variable GL representation levels\u2014the DSS should be able to handle GLs specified at different levels of representation, ranging from structured text to a fully formal, machine-comprehensible format. The methodology by which these two additional objectives were achieved will be discussed in detail in Section 2. 1.2 The DeGeL architecture The main obstacle in developing machine-interpretable GLs is a conceptual one: expert physicians cannot (and need not) program in GL-specification languages, which require computational skills, while knowledge engineers do not understand the clinical semantics of the GLs and the knowledge implicit in them. Thus, a collaborative-specification methodology is needed. To solve the GL-specification conceptual-gap problem, as well as other problems (e.g., the need for sophisticated search and retrieval of GLs), we have developed a distributed architecture, the Digital electronic Guideline Library (DeGeL), which supports most of the design-time and runtime tasks involved in GL-based care [15]. The set of tools provided by the DeGeL framework can be divided into two types: design-time and runtime. The design-time tools support GL activities such as GL modeling, while the runtime tools support GL activities such as GL application, the task that is the focus of this paper. One of the design-time processes supported by the DeGeL architecture is an incremental specification of the GLs for multiple GL ontologies, performed as a collaboration among clinicians and knowledge engineers (Fig. 1 ). The process, which starts with the key step of forming a consensus specific to the chosen GL-representation ontology, has been shown to be quite feasible [16,17]. The gradual, collaborative, iterative structuring process in the DeGeL architecture results in the following increasingly formal GL versions, all of which are stored in the GL knowledge-base: (1) Semi-structured Text\u2014snippets of text assigned, usually by the GL editor who typically is a clinician with limited knowledge of the selected guideline specification ontology, to top-level target-ontology knowledge roles, such as the eligibility criteria for applying the GL, or the GL\u2019s objectives. These roles would have different names in different GL ontologies, of course; (2) Semi-formal representation\u2014further specification of the structured text, adding more explicit procedural control structures, performed jointly by the knowledge engineer and the GL editor, such as explicit specification of whether the actions are to be carried out sequentially or concurrently; (3) Formal representation\u2014final specification performed by the knowledge engineer, resulting in the GL converted to a machine-interpretable format, executable by an appropriate runtime execution module specific to the chosen target GL ontology. The output of the structuring process is what we refer to as a hybrid representation of the GL [15], which contains, for each GL, or even for different sections (knowledge roles) of the same GL, one or more of the above three formats. For example, the eligibility criteria might include also formal expressions, thus supporting automated eligibility determination, although the GL\u2019s procedural aspect is either semi-structured or semi-formalized only. Note that these intermediate hybrid representations support additional tasks; for example, the semi-structured representation supports context-sensitive search [18]. 1.3 The Asbru guideline-specification ontology Asbru [19,20] is an expressive GL-representation language designed as part of the Asgaard project [21], which focuses on application and quality assessment of time-oriented clinical GLs. The Asbru ontology represents clinical GLs as a hierarchy of time-oriented skeletal plans, which are plan schemata at various levels of detail. Each plan includes different types of conditions, represented as temporal patterns of either the patient\u2019s state or the plan\u2019s state, which control the GL application. For example, the filter-precondition specifies an obligatory eligibility criterion, while the suspend-condition specifies the circumstances under which the GL\u2019s application should be halted. Other important Asbru knowledge roles include the plan-body, which includes all control structures (e.g., sequential, concurrent, and repeating combinations of actions), preferences (utility functions), expected effects, and process and outcome intentions, which support quality assessment. During the application of an Asbru plan it is assigned to a state which implies its current status in the GL application process (e.g., activated plan). The transition of a plan from one state to another is based on the state transition model of the Asbru language (Fig. 2 ). The possible states of a plan can be roughly grouped into the following main phases: (1) Selection phase\u2014during this phase a plan is not applied yet, rather it is only considered for application according to its eligibility criteria (e.g., filter-precondition); (2) Execution phase\u2014during this phase the application of the plan has began and various aspects of its application should be continuously monitored using other conditions such as the complete condition. Note that it is often useful to organize GLs not as full-blown flowcharts or state transition charts, but rather as common scenarios, as was proposed in the Prodigy project [13]. The Asbru GL-specification ontology certainly can support this structure (e.g., by definition of a top-level branching statement), and therefore, such scenarios can also be applied by any Asbru GL application system, such as the one we describe in this study. However, such an organization of the GL must be performed by a collaboration of clinicians and knowledge-engineers during the consensus-forming phase [17], a process supported in the detail by the DeGeL architecture and GL-specification methodology (see Section 1.2). 2 Methods As hinted in desiderata 8 and 9, most GLs are unfortunately not in a machine-interpretable format; an EPR is neither always available, nor, when available, does it support the full requirements of automated GL-based care. Indeed, recent studies [14] uphold the fact that even modern EPR systems are still not robust enough to support the needs of a GL-based DSS (e.g., certain clinical concepts might simply be missing in the EPR, or exist at the wrong level of abstraction, or the data might be outdated). Thus, we propose a different approach for supporting application of clinical GLs in an automated fashion, which capitalizes on our ongoing research work of the DeGeL framework. Our approach to GL-based care neither necessitates a candidate GL to be fully formalized, nor requires an EPR to be always available online and be complete with regards to the patient data required to apply the GL. We have implemented our approach as the Spock system. The goal of the Spock system is to assist a care-provider to apply GLs over extended time periods in an intermittent fashion at the point of care. The Spock system was designed to support the application process of machine-interpretable GLs represented using the Asbru GL-specification ontology, regardless of the representation level and whether an EPR is available or not. (The current implementation focuses on the application of the intermediate representation levels.) Although the original Asbru ontology includes only the formal representation level, the hybrid GL-representation model of the DeGeL framework includes also the intermediate representation formats (semi-structured and semi-formal). Hence, a hybrid version of the Asbru ontology, named Hybrid-Asbru, which includes also the intermediate representation levels, was developed according to DeGeL\u2019s hybrid-GL model (see Section 2.4). 2.1 The hybrid runtime application model of the Spock system The application model of the Spock system is hybrid in two senses: (1) The GL-representation level\u2014a candidate GL for application can be in any of the DeGeL architecture\u2019s three representation levels. Thus, For example, in the case of the Hybrid-Asbru ontology, the GL\u2019s filter and setup conditions might be in fully formal Asbru, the plan-body in semi-formal Asbru, and the intentions still in semi-structured text. (2) The availability of an effective EPR\u2014during GL application, patient data are not assumed to be available; even when the GL is fully formal, interaction with the care-provider with respect to patient data might be required. Furthermore, when applying parts of a GL that are not fully formalized yet (i.e., in one of the intermediate formats), interaction with the user is imperative, regardless of whether an EPR exists or not. The two dimensions of the hybrid application model, and the existence of two different options for each dimension, together imply four possible scenarios for applying GLs. Although application of GLs in a fully automated fashion is feasible only when the GL is in a machine-interpretable format, automated support to some extent can be provided to GLs in any of the intermediate representation levels as well. Moreover, fully machine-interpretable GLs can be applied if and only if an effective EPR is available. The formal nature of the machine-interpretable format prevents its content from being interpreted by a human agent without having expert knowledge of the selected specification ontology (e.g., Asbru), a capability which cannot be expected from a typical care-provider. Naturally, the services offered by the Spock system improve as the level of sophistication (in particular, machine comprehensibility) of the GL\u2019s knowledge representation increases and an EPR becomes more available. Thus, as the level of representation decreases or an EPR is less available, there is a graceful degradation in the functionality offered. 2.2 The EPR access method In order to support Desideratum 5, runtime access to the EPR (when relevant), we have developed an accompanying architecture, IDAN [22], which enables access to heterogeneous clinical databases for the purpose of querying both raw clinical time-oriented data and meaningful concepts (temporal abstractions) derived from it. The GL application tools can also access the KNAVE-II intelligent patient data visualization and exploration module [23], which has been shown to reduce significantly the time required by the clinician to answer queries inherent in the GL, and increase the precision of the answers [24]. 2.3 The Spock system architecture The Spock system is designed as a client\u2013server architecture (Fig. 3 ) to support the task of applying Hybrid-Asbru clinical GLs in a distributed and modular fashion. As a client\u2013server system, the Spock system consists of two types of component: (1) client side components which include a Hybrid-Asbru GL application engine, named Spock Engine (see Section 2.7) and a default Graphical User Interface (GUI) (see Section 2.9); (2) server side components, which include a central repository named Spock Server (see Section 2.8), for logging GL application information accompanied by a set of web-services enabling remote access to the GL application log via the web. In addition, the Spock system relies on supplementary services for its operation such as: (1) services that retrieve the knowledge of a hybrid-GL selected for application provided by the DeGeL framework; (2) services that access heterogeneous clinical databases and support intelligent querying capabilities provided by the IDAN architecture; (3) services that retrieve information of standard terms that were embedded in the GL knowledge provided by the centralized medical vocabulary server; and (4) parsing services used by the Spock Engine when interpreting XML-based Hybrid-Asbru guideline content. The distributed and modular nature of the system relies mainly on design principals of the Service-Oriented Architecture (SOA) [25]. The distributed architecture of the Spock system enables it to span its resources over several servers thus improving performance compared to a centralized architecture. In addition, the modularity of the system\u2019s design makes it easier to replace any component (e.g., the GUI) with minimum effects on the rest of the system. 2.4 The intermediate representation levels of the Hybrid-Asbru ontology The availability of the semi-structured and semi-formal intermediate representation formats is a key factor underlying our research approach, which was designed to support automated application of clinical GLs at several intermediate representation levels. Thus, in order to understand better the hybrid-runtime application model, and in particular, the operational semantics of the Spock system, we need to delve a bit more deeply into the semantics of the Hybrid-Asbru ontology in general, and the semi-formal Asbru format in particular. Examples of Hybrid-Asbru intermediate representation levels are provided elsewhere (see Appendix A). 2.4.1 The semi-structured Asbru representation format The semi-structured representation format is usually the first level specified by a GL editor (see Section 1.2). In our case, the knowledge roles of the Hybrid-Asbru ontology semi-structured representation level consists of the original Asbru ontology (see Section 1.3) knowledge roles, such as intentions, conditions, and plan-body. In addition, new knowledge roles were added especially to the semi-structured representation level, such as Clinical settings which describes the clinical setting of the GL (e.g., inpatient settings) and Actors which describes the actors involved in applying the GL (e.g., family practitioners). The selection criteria for deciding which knowledge roles from the Asbru ontology will support the semi-structured representation level were mainly based on how well medical experts understand the semantics of the knowledge roles and their relative contribution to context-sensitive search [18]. For example, the semantics of the filter-precondition was intuitive to medical experts since it resembles the inclusion\u2013exclusion criteria concept that is often used in the medical literature. On the other hand, Asbru knowledge roles such as variables or defaults were not intuitive to the medical experts, since understanding their semantics requires computer programming skills. 2.4.2 The semi-formal Asbru representation format The semi-formal representation level of the Hybrid-Asbru ontology, which adds control structures such as in parallel or in sequence, extends the semi-structured format towards the fully formal Asbru GL. Initially, the motivation for creating the semi-formal representation level was to enable further specification of the semi-structured content either by a GL editor, who is neither familiar with the exact syntax of Asbru nor has any programming skills, or by a knowledge engineer who might collaborate with a medical expert to complete the conversion of the free-text GL to a formal format. Thus, the semi-formal Asbru specification is a somewhat simplified syntactic version of the fully formal Asbru ontology, which cannot support fully automated application, but is still expressive enough to include most of Asbru\u2019s features that are essential for GL application. However, the semi-formal representation level also has another major benefit, which is at the core of the current study; namely, enablement of the application of clinical GLs that are not fully formalized. Thus, the semi-formal Hybrid Asbru initially focused on Asbru\u2019s plan-body knowledge role. A specialized specification tool for the semi-formal plan-body knowledge role was even developed, named the Plan-Body Wizard [26], as an Asbru-specific add-on to the DeGeL\u2019s GL specification tool. Eventually, we have added a semi-formal representation level slot to all of Asbru\u2019s top-level knowledge roles. In order to support the specification of Asbru\u2019s conditions, which are temporal patterns at different levels of abstraction, a semi-formal expression language (see Appendix B) was developed instead of the complex syntax of Asbru\u2019s temporal patterns. Thus, temporal-patterns are expressed using combinations of text, logical operators and time-annotations which medical experts may/should be more able, with additional training, to specify. These semi-formal expressions capture the logical semantics of an expression (e.g., And Boolean operator) and therefore facilitate a knowledge engineer to complete the conversion process to Asbru\u2019s temporal pattern or other formalism. Another simplification of the semi-formal Asbru is that, instead of using Asbru\u2019s formal notion of variables, parameters, constants and arguments relevant only to a fully automated application system, each semi-formal Asbru GL has a list of patient-related data, obtained-values, defined during design-time and instantiated during the semi-automated application of the GL for storing relevant patient data. 2.5 Adding support to encode common clinical actions The Asbru GL-specification language does not include explicit constructs for expressing common clinical actions such as drug prescription or physical examination. These actions that are frequently used in day-to-day clinical practice were intended to be modeled through programming interfaces (i.e., software components) used by an Asbru-based execution engine to link with clinical information systems (e.g., an order-entry system). Another option, although cumbersome, is to specify these actions using the Asbru knowledge role User-Performed. However, the textual nature of the knowledge role may limit its interpretation by the execution engine, for example to extract the precise dose of a drug in a drug-prescription action or the name of the laboratory test in an observation. Other GL-specification languages adopted the approach of incorporating into the ontology one of the well-known and accepted standards to facilitate the specification of patient\u2019s clinical state as well as care-provider\u2019s actions recommended by the GL. For example, the GLIF3 [27] GL ontology has incorporated several components from the HL7\u2019s RIM model [28]. Note that, for the purposes of a runtime application engine that applies GLs represented in intermediate formats, the RIM model is far beyond its needs, since there is no necessity to incorporate a complete model of an EPR. Thus, in the Hybrid-Asbru ontology we have also used the HL7\u2019s RIM only as a basis for a much simpler model (albeit somewhat different in its specific acts) for the clinical actions palette (see Appendix C) that includes clinical actions such as referral, observation and drug-related activities (e.g., drug administration). To support sharability and reusability of the GLs, we added to each clinical action an optional slot to specify a term that originates from controlled medical vocabularies. 2.6 The semantics and pragmatics of a Hybrid-Asbru plan Basler et al. [29] provided a formal semantics for state transitions in the original Asbru. For example, a plan may not transit to the completed state, although its complete-condition holds, unless it satisfies additional conditions, such as being active long enough according to certain predefined temporal constraints. However, several issues required extension due to the needs of the hybrid application mode implemented in the Spock system and the necessity to support the intermediate representation levels. For example, the propagation implications of a suspended plan on its parent plan and its child plans were added (see Section 2.6.1) as well as the pragmatic consideration of which conditions require the user\u2019s attention during GL application sessions in a semi-automated application mode (see Section 2.6.2). 2.6.1 The semantics of state propagation within a Hybrid-Asbru plan A typical Asbru representation model of a clinical GL is usually organized as a library of Asbru plans that are created during the decomposition process performed during the specification process of the clinical GL [19]. The Asbru plans in the library are interrelated in a hierarchical network of plans and subplans using a parent\u2013child relationship which is typically encoded using the controls structures (e.g., do in parallel) provided by the Asbru plan-body knowledge role. Therefore, two types of plans can be distinguished: (1) a composite plan\u2014includes plan steps which enable to invoke other plans in the plan library (i.e., decomposable to other plans); and (2) atomic plan\u2014used to include a single recommendation to carry out a specific action (e.g., administer a certain drug). The state transitions that an instance of an Asbru plan undergoes during its application affects also instances of other plans it is related to (e.g., its parent plan). Thus, the state transitions of a plan instance should be propagated to an instance of other plans in the plan\u2019s hierarchy. Propagation of state transitions is bidirectional. Some state transitions of a plan instance should be propagated to the instance of its subplans, while other state transitions of a plan instance should be propagated to its parent plan instance. Thus, there are two types of state transitions propagation: downward propagation and upward propagation. The downward propagated states are the state transitions that propagate from an instance of a parent plan to the instances of its subplans. For example, whenever a plan instance does terminate successfully (i.e., in a completed state) or does not (i.e., in an aborted state), the application of the instances of its subplans must terminate as well. The upward propagated states are the state transitions that propagate from a subplan instance to its parent plan instance. The constraints that determine whether the parent plan instance is affected by its subplan instances are modeled using Asbru\u2019s abort-if (i.e., specifies which subplan instances must complete successfully) and wait-for (i.e., specifies which plan instances are mandatory) constraints [20] also known as continuation-specification. For example, if a subplan instance that must complete successfully aborts, the application of its parent plan instance may also be terminated depending on the abort-if constraint. 2.6.2 The pragmatics of the state transition model of a Hybrid-Asbru plan instance We have developed an extension to the original state transition model of an Asbru plan that also continued the work of Basler et al. [29], but on the pragmatic level. For example, the conditions that require monitoring during the execution phase of a plan instance were further defined in accordance with specific plans states during its execution phase. There is no point in monitoring the complete-condition of a (sub)plan, as long as there are mandatory subplans that were not yet completed (i.e., in a MoreStepsToApply substate). This pragmatic aspect is especially important in a semi-automated hybrid application mode; for example, when there is no sufficient EPR support, since consideration of this aspect has the potential to minimize the interaction overload on the clinician by avoiding unnecessary requests to data entry and manual evaluation of conditions. The extended model (Fig. 4 ), illustrated using UML State Diagrams (also known as Statecharts) [30], covers all of the possible scenarios regarding the internal state of a plan instance and the external events (or messages, in object-oriented formulation) it receives. An application of a plan begins upon receiving a consider event. For example, when a new guideline application session is started or when one of the guideline\u2019s recommendations, modeled as a separate plan, is applied. First, the plan undergoes the Selection state in which the plan is tested for its applicability to the patient. For example, the filter-precondition is evaluated to make sure it holds. During the Selection state the plan may be terminated and transited to the Rejected state either because one of its applicability conditions (e.g., setup-precondition) does not hold or due to an upward propagation of a terminated state of its parent plan (e.g., parent plan transited to the aborted state). In case all applicability conditions hold and the Earliest Starting Shift (ESS) [20] has elapsed, the plan transits to the Execution state and also instantaneously transits to the Activated state, although, it is entirely possible to guard the transition of the plan to the Activated state. We have added two new plan-instance substates within the Activated state, the MoreStepsToApply and NoMoreStepsToApply substates. Being in the MoreStepsToApply substate means that there are still more mandatory plan steps (e.g., a clinical action or activation of another plan) to apply before it can be terminated successfully (i.e., in a Completed state). Thus, during this state there is no point in monitoring the complete-condition; only the abort-condition and suspend-condition require monitoring. Being in the NoMoreStepsToApply substate means the opposite (i.e., there are no more mandatory plan steps to apply); thus, only during this state does the complete-condition require monitoring on top of other monitored conditions (e.g., abort-condition). We have also added two substates within the Suspended state, the SuspendedCondHolds and ParentSuspended substates. The SuspendedCondHolds state implies that the plan has transited to the suspended state because its suspend-condition holds while the ParentSuspended state implies that the plan has transited to the suspended state because its parent plan has been suspended (i.e., downward propagation). Only during the SuspendedCondHolds state does the reactivate-condition require monitoring since when in the ParentSuspended state the plan reactivation depends solely on the reactivation of its parent plan. Note that both additions support Desideratum 7, the need to minimize unnecessary interaction with the busy clinician when operating in a semi-automated mode. The rest of the state transitions are straightforward and have already been addressed in the literature describing the Asbru language\u2019s syntax and semantics [20,29]. 2.7 A detailed view of the Spock guideline-application engine In this section, we explain in detail the internal workings of the Spock Engine and their relationship to other aspects of the Spock system. 2.7.1 Preserving the abstraction barriers of the Spock engine Several problems arise when applications contain a mixture of data access code (e.g., retrieving the GL\u2019s knowledge), business logic code (e.g., processing the GL\u2019s knowledge), and presentation code (e.g., displaying the GL\u2019s recommendations). Tight coupling between components (or layers) of a system causes it to be difficult to maintain. Due to the dependence of the Spock Engine on external services, it is very important to have a system architecture that is as loosely coupled as possible. Therefore, one of the key design elements of the Spock system in general, and the Spock Engine in particular, was to preserve an abstraction barrier between all components and services, whether internal or external. When considering Desideratum 3 for developing GL-based decision support systems (see Section 1.1), integration into local clinical host systems, it is apparent that the user interface through which the Spock Engine interacts with its users may be customized or even replaced all together to meet user demands at a specific clinical setting. Likewise, other external resources, such as a DeGeL or IDAN server, may be subjected to modifications as software components naturally evolve through time. To decouple the Spock Engine from the GUI, two design patterns were implemented. The first design pattern is the Model-View-Controller (MVC) pattern [31]. The MVC pattern consists of three building blocks which are: (1) the Model object\u2014a non-visual object that contains some information about the application\u2019s domain, for example an instance of an Hybrid-Asbru (sub)plan; (2) the View object\u2014a visual object that handles the display of a Mode object, for example a user interface widget that displays the recommended actions of an instance of an Hybrid-Asbru (sub)plan; (3) the Controller object\u2014a non-visual object that mediates user input from a View object to the appropriate Model object (e.g., the result of a user evaluating the plan\u2019s filter-precondition) as well as monitoring the state of the Model object itself (e.g., update the application log with plan\u2019s state transitions). Thus, the GL application engine consists of a controller object that coordinates the application of a Hybrid-Asbru GL in respect to the user interface being used in each clinical setting, the connection with the Spock Server that provides access to the GL application log and use of external services (e.g., DeGeL\u2019s GL knowledge-base) during GL application. However, the MVC pattern does not solve the issue of keeping the view object up-to-date with changes to the model object it displays. To solve this issue another design pattern named the Observer pattern [31] was implemented. The Observer pattern provides a loosely-coupled mechanism that enables a certain class, named the Observer class, to observe the state of another class, named the Subject class. The Subject class resembles the Model in the MVC design pattern while the Observer class resembles the View in the MVC design pattern. Thus, in the case of the Spock Engine the Subject instance is typically an instance of a Hybrid-Asbru plan while the Observer instance is usually some sort of a GUI widget (a windows form) that reflects its state to a user. A state change in the Hybrid-Asbru plan instance is usually either a state-transition (e.g., transits to state Activated) or its current recommended action. Thus, a Hybrid-Asbru plan provides a set of events (e.g., state-transition events) to which any observer instance can register in order to observe its state. In addition, to decouple the Spock engine from other services that it consumes, e.g., the IDAN server to access patient data (see Section 2.2), or the DeGeL server to retrieve GL knowledge (see Section 1.2), a set of web-service interfaces were declared, which explicitly define the expected operations each service must support. These application interfaces act as an abstraction barrier between the Spock Engine and the services it consumes. 2.7.2 The internal workings of the Spock engine An application of a GL by the Spock Engine (Fig. 5 ) consists of the triplet: (1) the GL to apply, (2) the care-provider applying it, and (3) the patient to whom to apply the GL. For each such application triplet, an application-instance class object is created and the details of the application instance are stored in the GL application log using the services provided by the Spock server (see Section 2.8). The application of the GL starts by retrieving the GL\u2019s knowledge from the DeGeL GLs knowledge-base. The knowledge of the GL, still in an XML format according to the Hybrid-Asbru XML schema, is parsed yielding in-memory objects of Hybrid-Asbru knowledge roles. The knowledge of a Hybrid-Asbru GL consists of all of the Hybrid-Asbru plans that participate in it; each has its own set of knowledge roles, such as plan-body or various conditions (e.g., filter-precondition). Due to optimization considerations, not all of the GL knowledge is retrieved at once. In fact, the controller handles the retrieval of GL knowledge only when it is actually required for the application process. A cache of GL knowledge that had been retrieved already is maintained to improve performance even more. As described earlier, a Hybrid-Asbru GL is decomposed to (sub)plans (see Section 2.6.1). Thus, for each plan that participates in the application process, a corresponding plan-instance object is instantiated. The first created plan-instance object in each GL application is the root plan-instance object, and is associated with the application-instance object created when starting the GL application. When the root plan-instance object is terminated, either successfully (i.e., in a completed state) or unsuccessfully (i.e., in a rejected or aborted state), the application of the overall GL instance terminates. All of the plan instances are interconnected in a plan-instance network (i.e., parent\u2013child relation). The plan-instance network, implemented using the Constraint-Propagation model [32], and adhering to the Hybrid-Asbru state propagation model (see Section 2.6.1), enables the propagation of the state transition of any plan instance either downwards or upwards in the plan-instance network. The content of the Hybrid-Asbru plan-body knowledge role contains either recommendations for actions (i.e., an action step) or decision nodes (i.e., a decision step). Thus, the Spock engine provides two types of plan-step: (1) action-step to perform (e.g., order a laboratory test), and (2) decision-step (e.g., if-then-else) which might result in an additional plan-step. The main difference between these two types of steps is their possible states during a GL-application session. The possible states of an action-step include recommended, running (i.e., the user accepted the recommendation and it is still being applied), completed (i.e., the application of the recommended step has been completed), failed (i.e., the application of the recommended step failed to complete), and declined (i.e., the user declined the recommendation). The possible states of a decision-step include decide (i.e., a decision should be made for the application to proceed) and answered (i.e., the user evaluated the decision-step). One important feature of the Spock engine is the ability to cancel the application of a recommendation. For example, a recommendation resulting from the evaluation of a decision-step can be canceled, to enable the user to backtrack from decisions she made, when other options seem more appropriate (note that no overriding is implied here). Whenever a user declines or cancels a recommendation, she is prompted to supply an explanation justifying her decision. The explanation is recorded in the application log for further use, for example by a retrospective quality assessment module. This behavior conforms with the modern human-computer interaction tendency to provide users with an environment that facilitates recovery from errors. In addition, the Spock engine explicitly supports Desideratum 5 (provision of an overriding capability) by enabling the user to reject any optional recommendation without any consequences, or reject a mandatory recommendation, while warning the user of the consequences (e.g., exiting the core GL plan). (See further discussion in Section 4.2.) 2.7.3 Minimizing the user\u2019s interaction requirements The interpretation of clinical GLs often requires a care-provider to invest a large amount of time to review the knowledge encoded in the GL. As a result, the care provider is overloaded with information about the GL and the patient she is treating. Moreover, the semi-automated application mode of the Spock system often requires additional user intervention whenever an EPR is not available to act as a mediator to patient data. As mentioned in Desideratum 7, minimizing user interaction is a major goal in a medical DSS. However, some improvement can be made by displaying to the care-provider only those knowledge roles that are relevant to the current stage of the GL application process. For example, there is no point in displaying the filter-precondition knowledge role after the actual application of the GL has already been started. Thus, as we also described when discussing the pragmatics aspect of the state transition model of a Hybrid-Asbru plan instance (see Section 2.6.2), the Spock engine requires only the evaluation and monitoring of conditions that are relevant to each possible plan state. Thus, a plan-instance object (see Section 2.7.2) exposes a method to retrieve the knowledge roles that are relevant to its current state in the context of the GL application session. Furthermore, by using the most formal representation level available and relevant for each knowledge role (e.g., the semi-formal vs. the semi-structured representation level), the information overload can be reduced even further, due to a greater level of automation that can be applied (e.g., the semi-automated evaluation of semi-formal expressions). For example, since the semi-formal Hybrid-Asbru representation (see Section 2.4.2) provides sufficient expressivity, the Spock system guides the care-provider more closely through the stages of applying a GL. Thus, in the case of a sequential control structure, only one action will be recommended for application while the other actions are annotated as deferred. In addition, the Spock system also provides semi-automated evaluation capabilities of semi-formal expressions that are often used to encode various conditions controlling the lifecycle of a GL (e.g., abort-condition). For example, in the case that one of the operands of a logical OR expression is evaluated as true (i.e., holds) by the user, the Spock engine notifies the user that there is no need to evaluate the rest of the operands, since the entire expression is true. Similar support exists for other types of semi-formal expressions. Automated monitoring of the patient\u2019s state with respect to the GL requires that: (1) the GL\u2019s monitored conditions (e.g., abort-condition) are formally represented; and (2) that an EPR is available and is able to provide all of the information necessary to evaluate these conditions. However, as we have previously explained, this scenario is not very common (see Sections 1.1 and 2.1). Thus, the Spock engine provides for each plan instance a method which, by considering its current state (e.g., suspended), returns the knowledge roles, mostly types of conditions, which require monitoring for that instance. The method also returns helpful metadata about previous evaluations of these conditions (e.g., an evaluations timetable with relevant results), thus potentially avoiding too-frequent assessments. In addition, to reduce the work load on the care provider, the Spock engine does not obligate a recurrent evaluation of these conditions during the (same) GL application session, but rather adopts an optimistic approach that assumes that unless indicated otherwise, the GL application can be continued as planned (e.g., the abort-condition is still False). However, when resuming a GL application session, the user is prompted to evaluate the conditions that require monitoring, to confirm that it is indeed possible to continue the GL application from the point at which it was last stopped. Nonetheless, it is not obligatory to evaluate each and every monitored condition to continue application of a GL. The user has complete freedom to evaluate what she seems fit, again following the same optimistic approach. Finally, the semi-formal Hybrid-Asbru representation also includes an obtained-values knowledge role (see Section 2.4.2), used during a GL-application session to record patient data or states (e.g., TSH-level measurement taken on a particular date) that may be relevant throughout the application session. Thus, the user can in principle store any data entry required at some stage of the GL application and make it available at a later stage, to avoid reentry of recurring patient data. 2.8 The Spock server and the guideline application log To address the requirement of having a persistent storage of GL application, Desideratum 4 (See Section 1.1), the Spock server hosts the Guideline Application Log, essential to the Spock system, since the process of applying a GL is a process spanning a potentially long time period, which is performed in episodic fashion over several patient visits (i.e., an intermittent application process). Some of the main data entities stored in the persistent GL application log are: (1) Application Instance\u2014keeps the details of each application instance (e.g., the GL selected for application, the care provider applying it and the patient it is applied on); (2) Plan Instance State Transition\u2014includes the data about state transitions each plan instance had during its application (e.g., state transitions start and end time), which is a key factor to enabling the resumption of an intermittent GL application session; (3) Obtained value, which acts as a limited clinical data repository to store patient data (e.g., WBC count measured on some date) mainly when no connection to an EPR exists. Finally, the Spock server provides other basic services such as authentication and authorization of users as well as reporting services to provide various types of information (e.g., the GLs being applied for a patient) about existing application instances. 2.9 The default user interface of the Spock system To support an actual evaluation of a fully functional instance of the Spock architecture, a graphical user interface was developed for the Spock system that utilizes all of the features provided by the Spock system. This default user interface follows the application interface and provides the expected behavior, from the point of view of the underlying Spock engine (see Section 2.7.1), to maintain an interactive dialog with the user. The default user interface can be roughly divided into three main panels as depicted in (Fig. 6 ). To address Desideratum 6, support queries about the meaning of recommended actions (i.e., \u201clook ahead\u201d), the user interface provides a specialized module that enables the user to browse and explore the GL without actually applying any of its recommendations. This GL preview module is sensitive to the current state of the application and reflects in an intuitive manner, mainly using a flowchart notation, the content of the GL. In addition, the default user interface also enables the user to view the original sources of the free-text GLs that were used during the GL conversion process to a machine-comprehensible representation, as well as the GL\u2019s consensus, which reflects the interpretation of the GL agreed by the medical experts prior to the start of the GL conversion process (see Section 1.2). It is interesting to note that the GL preview module was added, due to user requests, after the core system was already working, and its embedding within the Spock system was very easy, thus demonstrating the modularity of the Spock\u2019s system\u2019s architectural design. (Initially, Desideratum 6 was accommodated only through the capability to browse the GL consensus, which typically includes its flowchart, and the structure of the currently active plan.) To address Desideratum 7, minimize user interaction, the user interface module used to evaluate intermediate-represented Hybrid-Asbru expressions is based on displaying Yes/No questions that the user can answer through standard user-interaction means (e.g., checkboxes, context menus). In addition, this module benefits from the Spock engine\u2019s capability of semi-automated evaluation of semi-formal expressions (see Section 2.7.3), and can thus notify the user when sufficient inputs has been received, thus avoiding unnecessary interaction with the user. Finally, to further address Desideratum 7, interaction is further minimized by enabling the user to evaluate a complex expression, such as an AND/OR tree, when she already happens to know the answer, with one simple indication, either TRUE or FALSE, instead of providing values for all individual subexpressions (e.g., \u201cage>65?\u201d), allowing the user\u2019s knowledge of the patient to be effectively exploited. 3 Functional evaluation of the Spock system We performed an experiment on the Spock system to evaluate its functional capabilities to support runtime application of Hybrid-Asbru GLs. The goal of the evaluation was to demonstrate the capability of the Spock engine to produce correct results in a set of realistic simulated patient records, chosen to cover most or all of the prototypical scenarios, as represented by GLs encoded in the Hybrid-Asbru intermediate representation. Although the ultimate goal of our research is to conduct a broader experiment, using real clinical settings, to evaluate the effectiveness of the Spock system when used by care-providers at the point of care, we consider the functional evaluation to be a preliminary mandatory step. 3.1 The evaluation methodology The methodology of the evaluation was to conduct an experiment in which the Spock system was used by medical experts to apply GLs using simulated patient records to examine the output of the application process. Three GLs were selected for the evaluation: (1) treatment of primary hypothyroidism (HypoThyrd) [33] that is intended for use by family practitioners to treat patients suffering from hypothyroidism that is directly related to the thyroid gland (i.e., primary); (2) treatment of Chronic Obstructive Pulmonary Disease (COPD) that is intended for use by emergency department physicians and/or general medical ward physicians to treat patients suffering from low respiratory rate related to chronic obstructive of the pulmonary system (only a major segment from the GL was used); and (3) treatment of Pelvic inflammatory disease (PID) [34] that is intended for use by gynecologists to treat patients suffering from an inflammatory disease related to the pelvis. (The three GL specifications created with the collaboration of the medical experts were used as the gold standard specification for a series of knowledge-acquisition experiments performed as part of a complementary research [16].) As can be seen in Tables 1 and 2 , the specified GLs are rather complex and include a variety of knowledge roles and types of plan. For example, the total number of decision steps in the PID GL is 16, in the COPD GL is four and in the hypothyroidism GL is seven decision steps. Another example is that the total number of plans in the PID GL is 106, in the COPD GL is 19 and in the hypothyroidism GL is 22 plans. The reason for the PID GL to seem much more complex is its wide use of drug regiments (i.e., group of drugs to be administered together) where each drug regimen consists of a set of atomic plans (i.e., plan activation of a drug administration or prescription clinical step) for each drug in the regimen and a series of conditions to select the appropriate drug regimen. The motivation for using simulated patients records was to cover different prototypical scenarios in the GLs selected for the evaluation. For example, in the case of the HypoThyrd GL several scenarios exist depending on the severity of the hypothyroidism state (e.g., unequivocal vs. equivocal state). Thus, with the assistance of the medical experts, five prototypical scenarios were found to be sufficient for each GL, although we concede that further data combinations were in theory possible, and for each one of these five GLs scenarios a simulated patient record was created. The evaluation of the Spock system was performed by the medical experts who performed the semi-structured specification, and assisted in performing the semi-formal specification (see Fig. 1), of the three selected GLs. Each experimental application run of the Spock system included a combination of a GL and a corresponding simulated patient record, which was displayed using an Excel spreadsheet, and which was used manually by the user to enter simple Yes/No answers into the Spock default user interface during the interactive dialog with the Spock engine. A total of 15 experimental runs, five runs for each of the GLs using a different simulated patient record, were performed. During the experimental runs the medical experts expressed explicitly after each step of the recommendations, whether the output of the system, as reflected in the default user interface and logged in the Spock server\u2019s database, is correct when compared to the GL knowledge and considering the specific patient data of the applied case. Following the experimental runs of the Spock system, a semi-structured interview was conducted with each medical expert. The purpose of the semi-structured interview was to capture the subjective experience of the medical experts from using the Spock system. The reason for performing only a restricted research survey using a semi-structured interview was due to the limited number of participants, three medical experts (i.e., one medical expert for each selected GL). Moreover, as emphasized, the evaluation goal of the first phase was limited to only functional aspects of the Spock system. Thus, issues such as usability study were outside its scope. 3.2 The evaluation results In order to exemplify the intricacy of the application instance created for each experimental run, we retrieved some of the information from the Spock server\u2019s application log. The data retrieved for each experimental run (Table 3 ) include the number of plan instances of both types (i.e., composite and atomic plans types) that were created, the number of plan steps of both types (i.e., action and decision plan steps) that were applied, and the total number of state transitions performed by all (sub)plan instances for each application instance. For example, in the case of the HypoThyrd GL, during the first experimental run, 10 composite plans were created, 15 atomic plans were created, 19 actions steps were applied, eight decision steps were applied (i.e., evaluated by the user), and 64 state transitions were performed. In total, during the 15 experimental runs (five experimental runs for each of the three selected GLs), 134 composite plans were created, 147 atomic plans were created, 246 actions steps were applied, 104 decision steps were applied and a total of 788 state transitions were performed. For the 15 experimental runs, a mean of 8.9 composite plans and 9.8 atomic plans were created, 16.4 actions steps were applied on average, 6.9 decision steps were applied on average, and the mean number of state transitions performed per GL application was 52.5. For a detailed illustration of the comparison between the means of the various aspects of the experimental runs for each of the three GLs, see Fig. 7 . The data resulting from the experimental runs of the PID GL and the HypoThyrd GL are very similar. For example, in both GLs, about 10 composite plans were created on average. However, in the case of the COPD GL, the values of all GL-application parameters (e.g., the mean number of applied decision or activation steps) were lower than the mean values of the respective application parameters for the other two GLs. That might not be surprising if we consider the relative complexity of the three GLs, as it manifested itself in the semi-formal specification (see Tables 1 and 2). For example, the COPD GL segment used here consisted of only four decision steps, while the PID GL consisted of 16 decision steps. In addition, the HypoThyrd GL is intended for a lifetime lasting treatment, while the scope of the COPD GL segment used in this experiment was limited to an inpatient setting only. Table 4 summarizes the main themes in the comments of the medical experts following the Spock evaluation, as these were made in a semi-structured interview. 4 Conclusions and discussion We have developed a Hybrid-application model for runtime application of clinical GLs; the model neither assumes the existence of an available EPR, nor requires a formal representation of a GL. The Hybrid-application model was implemented as the Spock system and evaluated for its capability to apply, in a semi-automated fashion, intermediately represented Hybrid-Asbru GLs. We will summarize our study\u2019s conclusions and then discuss the current study\u2019s limitations and advantages, while briefly comparing it to other related studies. 4.1 Conclusions The first key conclusion of the current study was that the distributed architecture of the Spock system is feasible and was successfully implemented to provide its expected functionality. The second key conclusion, emerging from the evaluation, was that, in all cases, the Spock system provided the expected output and no other, unexpected, output. The Spock system managed to interpret correctly the knowledge encoded in the intermediate-represented GLs when provided with appropriate patient data through an interactive dialog. Thus, we have successfully demonstrated that the Spock system is capable of supporting the application of intermediately represented Hybrid-Asbru GLs in a semi-automated fashion. Another conclusion drawn from the evaluation pertains to the default user interface (see Section 2.9). The default Spock user interface was found to be rather complex, sometimes even confusing, and suitable more for knowledge engineers rather than care providers (see Table 4). However, as noted above, designing a very usable interface was not one of this study\u2019s objectives; the default user interface was developed for one purpose only: to enable some means of interaction between the Spock engine and a care provider during the evaluation. Thus, the user interface was expected to display correctly the input it receives from the Spock Engine (e.g., a condition to evaluate), and to pass the user\u2019s input back to the Spock Engine (e.g., user\u2019s decision). These expectations were fulfilled flawlessly by the default user interface, although, apparently, not in an optimally intuitive and user-friendly manner. However, the loosely coupled design of the Spock architecture\u2019s components facilitates the enhancement or the complete replacement of the current user interface by a different one. A rather more surprising conclusion was the additional benefit provided by the use of the Spock system during the GL-specification process, as reported by the medical-expert GL editors. As it turns out, the Spock system can assist a GL editor by providing a means for understanding the finer points of the specified GL\u2019s design, and its expected behavior when applied to a real patient. For example, during the structuring process (semi-structured and semi-formal specification) of the HypoThyrd and the PID GLs, the Spock system was often used by the GL editors (who were also clinicians) to simulate changes made to the GL before it was stored in the DeGeL architecture\u2019s knowledge-base. Finally, we have demonstrated the modularity and the resilience of the Spock architecture. The main demonstration of this modularity was our capability to enhance the user interface, following initial user feedback, without affecting other parts of the architecture (e.g., the Spock engine). Both of the enhancements described in Section 2.9 (simplification of the interface and addition of the plan-preview module) were added with minimal effort while the Spock system was in initial testing. 4.2 Discussion: limitations and advantages of the Spock architecture The current study has highlighted several interesting limitations and benefits of the current architecture. We will look at both, while briefly comparing it to other related studies. 4.2.1 Limitations of the current architecture and study The evaluation of the Spock system\u2019s functionality, although not intended to assess its usability, did underline its limitations and the need for redesigning its interface. A similar conclusion emerges from the evaluation of the GLEE system for the application of GLIF-3 GLs [35]. Future effort can be aimed at improving the default user interface of the Spock system, or at the development of an altogether new version of it that will be designed according to a user-centered analysis (possibly performed in the context of a specific clinical setting). However, given both studies, it is not clear that there is a need for a full-blown user interface as part of a GL application system, as opposed to a modular capability to link to an existing or new interface. The current architecture, although containing most of the elements needed for application of fully formal GLs, cannot yet support all of the aspects of providing such a capability. The GLEE system [35], the TALIS system for runtime application of ProForma GLs [36,37], the NewGuide application system [38] and the Prodigy-project runtime application system [39] do provide such a capability, although they are not fully hybrid systems. An important future step in the enhancement of the Spock system, on which we have already embarked, is to complete the various aspects of the Spock engine that together provide support to the use of fully formalized Asbru GLs, and not only intermediately represented GLs, when an EPR is available. Note also that, in theory, both the input to the Spock system (e.g., laboratory test results) and its output (e.g., messages to the attending physician, perhaps through devices other than a desktop computer) might occur while neither the patient nor the care provider are present. For example, either the patient\u2019s state or that of the GL application instance might change between therapy sessions. This mode of operation, however, requires the addition of an event monitoring broker subscribed to the input data relevant for each GL and capable of publishing GL-related messages in different channels (e.g., email, fax, SMS messages). We intend to add such a monitor, possibly through the use of the Momentum continuous monitoring architecture [40]. One potential limitation is that although Desideratum 5 (providing an overriding option) is supported up to a point (see Section 2.7.2), especially for optional recommendations, it is important to note that when a mandatory plan is rejected, the clinician is essentially no longer within the boundaries of the GL, and is now following her own judgment, without the support of the system. However, the current system architecture can enable the user, in principle, to override the input data even in an automated mode (i.e., when an EPR is available). In that case, the input datum used by the GL (e.g., the patient\u2019s TSH level) or its interpretation (e.g., \u201cHigh\u201d) can be modified by the clinician; and application of the GL can continue with the new value. The mechanism for performing this dynamic sensitivity analysis already exists within the IDAN/KNAVE-II framework [23], but needs to be linked explicitly to the Spock system. The decision whether to enable that interaction at all should be the clinician\u2019s, and should be at the level of each knowledge role type (e.g., abort-conditions). Finally, the evaluation of the Spock system was a technical one, not involving live patients in a clinical setting. This was also the case in the evaluation of the GLEE GLIF-3 application engine, and for similar reasons: the high cost and effort involved, which require a separate future clinical study. In the current study we have tried to maximize the insights gained from the technical evaluation by providing in the simulated cases, with the assistance of the medical experts, all of the main case variations (See Section 3.1). 4.2.2 Advantages of the current architecture The capability of providing some modicum of support regardless of the level of representation of the GL or the availability of an EPR is crucial, since we do not expect in the near future a dramatic improvement in the level of either resource. Note also, as emphasized earlier (Sections 1.1 and 2.1), that the EPR, even when available, does not always provide all data items required to apply the GL. However, in the current framework, creating formal GLs will always be worthwhile, even in the case when an EPR is not sufficiently effective (i.e., does not include all of the concepts needed for GL application [e.g. whether the patient smokes]), or is simply unavailable, since the hybrid-application mode (see Section 2.1) of the Spock system can be used to conduct an interactive dialog with the user regarding the patient\u2019s state, by either exploiting the existence of an intermediate representation level, or by extraction of a natural language query from the formal expression. Thus, the hybrid-application model implemented in the Spock system can be used to apply GLs in a mixed environment in which an EPR is fully accessible, partially accessible, or even not accessible at all. Several of the above-mentioned GL-application systems do provide some of the hybrid-application capability; however, they were not explicitly designed for the application of hybrid versions of GLs represented in their corresponding ontologies. Typically, systems designed to work with a fully accessible EPR or a fully formal GL cannot gracefully degrade their capabilities when either one or both resources are partially or fully missing; conversely, interpreters designed only for semi-formal models cannot be easily upgraded to fully formal execution, as demonstrated by an interpreter for GEM-encoded GLs [41]. Note that not only interventions but also data-input actions can be modeled in Hybrid Asbru as mandatory or optional (sub)plans, and interpreted appropriately by the Spock system. Thus, the combination of a hybrid representation and the Spock engine further conforms to Johnson\u2019s Desideratum 7, namely, limiting interaction with the user; in this case, by providing the capability for continuation of the GL application even when (optional) data have not been provided. Needless to say, if mandatory data have not been supplied, neither by the user nor through a link to the EPR, the GL application cannot continue. Another, somewhat surprising potential benefit, which transpired during the overall process GL specification and application, was that the combination of hybrid representations, such as Hybrid Asbru, and of frameworks for applying that representation, such as the Spock system, can be used as a simulation framework when developing new GLs. Assuming that a set of standard simulated patient records is available to a professional society developing a new GL, practical comparison of expected to observed output can quickly proceed with the assistance of the Spock system, regardless of the current level of representation of the GL (and it is easier to create an intermediate representation rather than a fully formal one). A similar potential use of the Spock system is for medical-education purposes (whether for medical students or clinical residents), by using the Spock system as a platform for illustrating common clinical scenarios as well as the corresponding appropriate reactions expected from a well-trained and experienced care-provider. Acknowledgments This research was supported in part by NIH award 5 R01 LM06806. We thank Drs. L. Basso and H. Kaizer, for their remarkable assistance in specifying several of the GLs used in this study. Views expressed are those of the authors and not necessarily those of the Department of Veterans Affairs. Appendix A Examples of Hybrid-Asbru ontology intermediate formats The following example of a GL snippet demonstrates the intermediate representation levels (i.e., semi-structured and semi-formal formats) of the Hybrid-Asbru ontology. The source is a free-text guideline for screening, treating and monitoring patients with hypertension. The knowledge roles abort-condition and plan-body of the Hybrid-Asbru ontology are displayed at the two intermediate representation levels, semi-structured and semi-formal formats, which were created during the gradual, iterative and collaborative conversion process implemented in the DeGeL framework: 1. The free-text source: (Fig. A1 ) 2. The semi-structured representation level: (Fig. A2 ) 3. The semi-formal representation level: (Figs. A3 and A4 ) Appendix B The semi-formal expressions extension to the Hybrid-Asbru ontology The semi-formal expressions formalism (see Fig. B1) is an extension added to the Hybrid-Asbru ontology to support the specification of conditions in an intermediate format suitable to guideline editors that are not necessarily knowledge engineers. A semi-formal expression is not entirely in free-text but rather is a mixture of structured text (e.g., logical operators, temporal constraints) depicting temporal patterns at different levels of specification. Since the creation of a semi-formal expression does not require deep understanding of the formal Asbru\u2019s complex syntax and semantics, it facilitates the gradual conversion process of a free-text guideline to a formal representation by enabling a knowledge engineer to complete the conversion process to Asbru\u2019s temporal pattern or other formalism. The building block of semi-formal expressions is the Simple-expression. A simple-expression is an atomic expression capable of describing a criterion regarding patient\u2019s state (e.g., TSH level of a thyroiditis patient) or GL application status (e.g., subplan termination), mostly using a free-text slot, with an optional temporal constraint. Composite expressions, on the other hand, are non-atomic expressions often used in clinical GLs to describe criteria such as patient\u2019s eligibility. Examples of composite expressions include: (1) Negated-expression\u2014contains a single subexpression of any type and is true if its subexpression is false and vice versa; (2) Logical-expression\u2014consists of two or more operands linked by one of the Boolean operators (e.g., And, Or) and since an operand may be a composite expression as well (e.g., a negated-expression), nested structures of expressions can be created. In addition, more intuitive semi-formal expression were added such as k-from-n expressions (i.e., true if at least k expression items out of total of n expression items are true) to describe common conditions such as exclusion\u2013inclusion criteria (Fig. B1 ). Appendix C The clinical actions palette extension to the Hybrid-Asbru ontology The Clinical Actions Palette (see Fig. C1) extends the Hybrid-Asbru ontology to support the specification of common actions in day-to-day practical medicine (e.g., drug prescription, observation). The need for such an extension is the result of having an implicit and limited support for it in the original Asbru ontology that does not include a ready-to-use library of such reusable constructs. The main reference to the Common Clinical Actions Palette is the HL7\u2019s RIM that as also an inspiration to other GL specification formalisms (e.g., GLIF 3). Currently, the actions palette (see Fig. C1) includes actions such as: (1) drug-administration\u2014used to specify the administration of a drug and its details (e.g., route) to a patient by a care-provider; (2) drug-prescription\u2014used to specify a prescription of a drug and its details (e.g., dose) to a patient by a clinician; (3) Referral\u2014indicates a referral of a patient to a specialist in a particular medical domain (e.g., endocrinologist); and (4) Observation\u2014used to specify an observation like an order of a laboratory test (e.g., WBC count). Each clinical action is accompanied by an optional temporal constraint modeled by Asbru\u2019s time-annotation element to support uncertainty of time. In addition, each clinical action also includes an optional reference to a term originating from a controlled medical vocabulary to achieve reusability and sharing of clinical knowledge independent of specific clinical site. For example, the Current Procedural Terminology (CPT) vocabulary is used to describe clinical procedures while the Logical Observation Identifiers Names and Codes (LOINC) is used to describe clinical lab tests. Finally, to support the notion of clinical GLs as tools for promoting evidence-based medicine, each clinical action includes two optional attributes, named Level-of-Evidence and Strength-of-Recommendation, which jointly describe the evidence grading and effectiveness of the action, respectively. Note that the values assigned to these attributes are in the context in which they appear in the GL, which already incorporates the complete patient state assumed at that point. The clinical actions palette was seamlessly assimilated into the Hybrid-Asbru ontology using the Plan-Activation construct. The Plan-Activation construct enables the user to invoke a plan from an already activated plan (see Fig. C2). In addition, the clinical actions palette was added to the knowledge-base of the DeGeL framework as reserved plans available for use during the conversion of a free-text GL by any GL-specification ontology (Figs. C1 and C2 ). References [1] B.C. James M.E.H. Hammond The challenge of variation in medical practice Archives of Pathology and Laboratory Medicine 124 2000 1001 1003 [2] A. Ozdas Integrating \u201cbest of care\u201d protocols into clinicians\u2019 workflow via care provider order entry: impact on quality-of-care indicators for acute myocardial infarction JAMIA 13 2 2006 188 196 [3] Institute of Medicine, MJ Field, Lohr KN. Clinical practice guidelines: directions for a new program. Washington, D.C.: National Academy Press; 1990. [4] J.M. Grimshaw I.T. Russel Effect of clinical guidelines on medical practice: a systematic review of rigorous evaluations Lancet 342 1993 1317 1322 [5] Micieli G, Cavallini A, Qauglini S. Guideline compliance improves stroke outcome\u2014a preliminary study in 4 districts in the Italian region of Lombardia. Stroke, 2002;33:1341\u20131347. [6] Qualigini S et al. Non-compliance with guidelines: motivations and consequences in a case study. In: Proccedings of the symposium on computerized guidelines and protocols (CGP 2004), 2004. p. 75\u201387. [7] R.D. Zielstorff Online Practice Guidelines: Issues, Obstacles and Future Prospects Journal of the American Medical Informatics Association 5 3 1998 227 236 [8] Lobach DF. A model for adapting clinical guidelines for electronic implementation in primary care. In: Proceedings of the annual symposium on computer applications in medical care. American Medical Informatics Association (Amia); 1995. [9] M. Peleg Comparing Computer-Interpretable Guideline Models: A Case-Study Approach JAMIA 10 1 2003 52 68 [10] P.A. de Clercq Approaches for creating computer-interpretable guidelines that facilitate decision support Artificial Intelligence in Medicine 31 1 2004 1 27 [11] Pryor T, Hripcsak G. Sharing MLM\u2019s: an experiment between Columbia-Presbyterian and LDS Hospital. In: Proceedings of the 17th annual symposium on computer applications in medical care, 1993. p. 399\u2013403. [12] G. Schadow D.C. Russler C.J. McDonald Conceptual alignment of electronic health record data with guideline and workflow knowledge International Journal of Medical Informatics 64 2-3 2001 259 274 [13] Johnson PD et al. Using scenarios in chronic disease management guidelines for primary care. In: Proceedings of the 2000 AMIA annual symposium, 2000. p. 389\u201393. [14] Sonnenberg FA et al. Vocabulary requirements for implementing clinical guidelines in an electronic medical record: a case study. In: Proceedings of the 2005 AMIA annual fall symposium, 2005, Washington DC, USA. [15] Y. Shahar A Framework for a Distributed, Hybrid, Multiple-Ontology Clinical-Guideline Library and Automated Guideline-Support Tools Journal of Biomedical Informatics 37 5 2004 325 344 [16] Shalom E. An evaluation of a methodology for specification of clinical guidelines at multiple representation levels, in Department of Information Systems Engineering, 2006, Beer Sheva, Israel: Ben Gurion University. [17] Shalom E et al. The importance of creating an ontology-specific consensus before a markup-based specification of clinical guidelines. In: Workshop on AI techniques in healthcare:evidence-based guidelines and protocols, ECAI06. 2006. [18] Moskovitch R, Hessing A, Shahar Y. Vaidurya\u2014a concept-based, context-sensitive search engine for clinical guidelines. In: Proceedings of Medinfo 2004, the 11th World Congress on Medical Informatics, 2004. [19] Miksch S, Shahar Y, Johnson P. Asbru: a task-specific, intention-based, and time-oriented language for representing skeletal plans. In: Proceedings of the 7th workshop on knowledge engineering: methods & languages, UK: The Open University, Milton Keynes, 1997. [20] Seyfang A, Kosara R, Miksch S. Asbru reference manual Asbru version 7.3 Document Revision 2. 2002. [21] Y. Shahar S. Miksch P. Johnson The Asgaard project: a task-specific framework for the application and critiquing of time-oriented clinical guidelines Artificial Intelligence in Medicine 14 1998 29 51 [22] D. Boaz Y. Shahar A framework for distributed mediation of temporal-abstraction queries to clinical databases Artificial Intelligence in Medicine 34 1 2005 3 24 [23] Shahar Y et al. Distributed, intelligent, interactive visualization and exploration of time-oriented clinical data. Artificial Intelligence in Medicine, in press. [24] Martins SB et al. Evaluation of KNAVE-II: a tool for intelligent query and exploration of patient data. In: Proceedings of Medinfo 2004. [25] N.H. Michael P.S. Munindar Service-oriented computing: key concepts and principles IEEE Internet Computing 09 1 2005 75 81 [26] Shahar Y et al. The digital electronic guideline library (DeGeL): a hybrid framework for representation and use of clinical guidelines. In: Computer-based support for clinical guidelines and protocols (CGP 2004). IOS Press; 2004 [27] Peleg M et al. GLIF3: the evolution of a guideline representation format in overhage. In: MJ, editor. Proceedings of the 2000 AMIA. p. 645\u2013649. [28] Schadow G et al. Integrating Medical Information and Knowledge in the HL7 RIM. In: Proceedings of the 2000 AMIA annual fall symposium, 2000. [29] Basler M, Duelli C, Reif W. Formal semantics of Asbru\u2014an overview. In: Proceedings of the 6th world conference on integrated design & process technology (IDPT), 2002. [30] Stevens P, Pooley R, Using UML: software engineering with objects and components, Updated Edition ed. Addison Wesley; 2000. [31] M. Fowler Patterns of enterprise application architecture First Ed. 2002 Addison-Wesley Professional USA [32] H. Abelson G.J. Sussman Structure and interpretation of computer programs Second Ed. 1996 The MIT Press [33] American association of clinical endocrinologists medical guidelines for clinical practice for the evaluation and treatment of hyperthyroidism and hypothyroidism, 2005. [34] CDC, C.f.D.C.a.P.-. Sexually Transmitted Diseases Treatment Guidelines. 2002. [35] D. Wang Design and implementation of the GLIF3 guideline execution engine Biomedical Informatics 37 5 2004 305 318 [36] D.R. Sutton J. Fox The syntax and semantics of PROforma Journal of American Medical Informatics Association 10 5 2003 433 443 [37] Patkar V et al. Impact of a computerised decision support system on compliance with evidence-based guidelines for triple assessment. In: Workshop on AI techniques in healthcare:evidence-based guidelines and protocols, ECAI06, 2006. [38] Ciccarese P et al. A guideline management system. In: Proceedings of Medinfo 2004, the 11th world congress on medical informatics, 2004. [39] Johnson P, Tu SW, Jones N. Achieving reuse of computable guideline systems. In: Proceedings of Medinfo 2001. [40] Spokoiny A, Shahar Y. An active database architecture for knowledge-based incremental abstraction of complex concepts from continuously arriving time-oriented raw data. Journal of Intelligent Information Systems, in press. [41] Gershkovich P, Shiffman RN. An implementation framework for GEM encoded guidelines. In: Proceedings of the 2001 AMIA annual symposium, 2001. p. 204\u2013208.", "scopus-id": "34548363924", "pubmed-id": "17276145", "coredata": {"eid": "1-s2.0-S1532046406001390", "dc:description": "Abstract Clinical guidelines are a major tool in improving the quality of medical care. However, to support the automation of guideline-based care, several requirements must be filled, such as specification of the guidelines in a machine-interpretable format and a connection to an Electronic Patient Record (EPR). For several different reasons, it is beneficial to convert free-text guidelines gradually, through several intermediate representations, to a machine-interpretable format. It is also realistic to consider the case when an EPR is unavailable. We propose an innovative approach to the runtime application of intermediate-represented Hybrid-Asbru guidelines, with or without an available EPR. The new approach capitalizes on our extensive work on developing the Digital electronic Guideline Library (DeGeL) framework. The new approach was implemented as the Spock system. For evaluation, three guidelines were specified in an intermediate format and were applied to a set of simulated patient records designed to cover prototypical cases. In all cases, the Spock system produced the expected output, and did not produce an unexpected one. Thus, we have demonstrated the capability of the Spock system to apply guidelines encoded in the Hybrid-Asbru intermediate representation, when an EPR is not available.", "openArchiveArticle": "true", "prism:coverDate": "2007-10-31", "openaccessUserLicense": "http://www.elsevier.com/open-access/userlicense/1.0/", "prism:aggregationType": "Journal", "prism:url": "https://api.elsevier.com/content/article/pii/S1532046406001390", "dc:creator": [{"@_fa": "true", "$": "Young, Ohad"}, {"@_fa": "true", "$": "Shahar, Yuval"}, {"@_fa": "true", "$": "Liel, Yair"}, {"@_fa": "true", "$": "Lunenfeld, Eitan"}, {"@_fa": "true", "$": "Bar, Guy"}, {"@_fa": "true", "$": "Shalom, Erez"}, {"@_fa": "true", "$": "Martins, Susana B."}, {"@_fa": "true", "$": "Vaszar, Laszlo T."}, {"@_fa": "true", "$": "Marom, Tal"}, {"@_fa": "true", "$": "Goldstein, Mary K."}], "link": [{"@_fa": "true", "@rel": "self", "@href": "https://api.elsevier.com/content/article/pii/S1532046406001390"}, {"@_fa": "true", "@rel": "scidir", "@href": "https://www.sciencedirect.com/science/article/pii/S1532046406001390"}], "dc:format": "application/json", "openaccessType": "Full", "pii": "S1532-0464(06)00139-0", "prism:volume": "40", "prism:publisher": "Elsevier Inc.", "dc:title": "Runtime application of Hybrid-Asbru clinical guidelines", "prism:copyright": "Copyright \u00a9 2007 Elsevier Inc. All rights reserved.", "openaccess": "1", "prism:issn": "15320464", "prism:issueIdentifier": "5", "dcterms:subject": [{"@_fa": "true", "$": "Clinical guidelines"}, {"@_fa": "true", "$": "Decision support systems"}, {"@_fa": "true", "$": "Knowledge representation"}], "openaccessArticle": "true", "prism:publicationName": "Journal of Biomedical Informatics", "prism:number": "5", "openaccessSponsorType": "ElsevierBranded", "prism:pageRange": "507-526", "prism:endingPage": "526", "prism:coverDisplayDate": "October 2007", "prism:doi": "10.1016/j.jbi.2006.12.004", "prism:startingPage": "507", "dc:identifier": "doi:10.1016/j.jbi.2006.12.004", "openaccessSponsorName": null}, "objects": {"object": [{"@category": "standard", "@height": "149", "@width": "569", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr1.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "50606", "@ref": "gr1", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "33", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr1.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2784", "@ref": "gr1", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "176", "@width": "426", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr10.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "34827", "@ref": "gr10", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "52", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr10.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2552", "@ref": "gr10", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "234", "@width": "537", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr11.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "50656", "@ref": "gr11", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "54", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr11.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2497", "@ref": "gr11", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "322", "@width": "552", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr12.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "47013", "@ref": "gr12", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "73", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr12.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "1681", "@ref": "gr12", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "291", "@width": "550", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr13.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "44427", "@ref": "gr13", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "66", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr13.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "1672", "@ref": "gr13", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "207", "@width": "540", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr14.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "39772", "@ref": "gr14", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "48", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr14.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2066", "@ref": "gr14", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "222", "@width": "579", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr2.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "65252", "@ref": "gr2", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "48", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr2.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "3053", "@ref": "gr2", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "260", "@width": "560", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr3.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "65084", "@ref": "gr3", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "58", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr3.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "3215", "@ref": "gr3", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "567", "@width": "562", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr4.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "93634", "@ref": "gr4", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "93", "@width": "92", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr4.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2048", "@ref": "gr4", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "259", "@width": "571", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr5.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "63528", "@ref": "gr5", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "57", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr5.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2995", "@ref": "gr5", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "113", "@width": "430", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr8.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "22932", "@ref": "gr8", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "33", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr8.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "1746", "@ref": "gr8", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "113", "@width": "490", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr9.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "26961", "@ref": "gr9", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "29", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr9.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "1930", "@ref": "gr9", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "188", "@width": "667", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr7.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "67827", "@ref": "gr7", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "35", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr7.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "2443", "@ref": "gr7", "@mimetype": "image/gif"}, {"@category": "standard", "@height": "419", "@width": "578", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr6.jpg?httpAccept=%2A%2F%2A", "@multimediatype": "JPEG image file", "@type": "IMAGE-DOWNSAMPLED", "@size": "93951", "@ref": "gr6", "@mimetype": "image/jpeg"}, {"@category": "thumbnail", "@height": "91", "@width": "125", "@_fa": "true", "$": "https://api.elsevier.com/content/object/eid/1-s2.0-S1532046406001390-gr6.sml?httpAccept=%2A%2F%2A", "@multimediatype": "GIF image file", "@type": "IMAGE-THUMBNAIL", "@size": "5091", "@ref": "gr6", "@mimetype": "image/gif"}]}, "link": {"@rel": "abstract", "@href": "https://api.elsevier.com/content/abstract/scopus_id/34548363924"}}